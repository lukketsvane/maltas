/./matlas-wiki/app/api/search/route.js
import { NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabaseClient';

export async function GET(request) {
  const { searchParams } = new URL(request.url);
  const query = searchParams.get('query');
  
  if (!query) {
    return NextResponse.json({ error: 'Query parameter is required' }, { status: 400 });
  }

  const { data, error } = await supabase
    .from('materials')
    .select('*')
    .ilike('name', `%${query}%`)
    .limit(10);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}


/./matlas-wiki/app/api/insert-material.js
import { supabase } from '../../lib/db';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  const materialData = {
    name: 'Titanium Alloy',
    description: 'A strong and lightweight metal',
    properties: {
      "Density": "4.5 g/cm³",
      "Melting Point": "1,668°C",
      "Tensile Strength": "900 MPa",
      "Hardness": "36 HRC",
      "Thermal Conductivity": "21.9 W/m·K",
      "Corrosion Resistance": "Excellent"
    },
    usage_examples: [
      {
        "title": "Aerospace",
        "description": "Titanium alloys are widely used in aircraft and spacecraft due to their high strength-to-weight ratio and corrosion resistance."
      },
      {
        "title": "Medical Implants",
        "description": "Titanium alloys are biocompatible and are commonly used in medical implants such as hip and knee replacements, dental implants, and pacemaker cases."
      },
      {
        "title": "Automotive",
        "description": "Titanium alloys are used in high-performance automotive applications, such as engine components, suspension parts, and exhaust systems, due to their strength and low weight."
      }
    ],
    edit_history: [
      {
        "date": "2024-06-15",
        "editor": "John Doe",
        "changes": "Updated tensile strength and hardness values."
      },
      {
        "date": "2024-05-20",
        "editor": "Jane Smith",
        "changes": "Added information about medical implant applications."
      },
      {
        "date": "2024-04-01",
        "editor": "Bob Johnson",
        "changes": "Initial creation of the material page."
      }
    ],
    related_materials: [
      {
        "name": "Stainless Steel",
        "description": "A corrosion-resistant alloy with a wide range of applications."
      },
      {
        "name": "Aluminum Alloy",
        "description": "A lightweight and versatile metal with excellent corrosion resistance."
      },
      {
        "name": "Carbon Fiber",
        "description": "A strong and lightweight composite material with numerous applications."
      }
    ]
  };

  try {
    const { data, error } = await supabase
      .from('materials')
      .insert([materialData]);

    if (error) throw error;

    res.status(200).json({ message: 'Material inserted successfully', data });
  } catch (error) {
    res.status(500).json({ message: 'Error inserting material', error: error.message });
  }
}

/./matlas-wiki/app/materials/[slug]/edit/page.js
"use client";
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function MaterialPage({ params }) {
  const router = useRouter();
  const { slug } = params;
  const [material, setMaterial] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [session, setSession] = useState(null);
  const supabase = createClientComponentClient();

  useEffect(() => {
    const fetchSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setSession(session);
    };

    fetchSession();
    fetchMaterial();
  }, [slug, supabase.auth]);

  async function fetchMaterial() {
    try {
      setLoading(true);
      setError(null);
      const { data, error } = await supabase
        .from('materials')
        .select('*')
        .eq('slug', slug)
        .single();
      
      if (error) throw error;
      setMaterial(data);
    } catch (error) {
      console.error('Error fetching material:', error);
      setError('Failed to fetch material. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  if (loading) return <div className="container mx-auto px-4 py-8">Loading...</div>;
  if (error) return <div className="container mx-auto px-4 py-8">Error: {error}</div>;
  if (!material) return <div className="container mx-auto px-4 py-8">Material not found</div>;

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2">
          <h1 className="text-4xl font-bold mb-4">{material.name}</h1>
          {material.header_image && (
            <div className="mb-6">
              <Image 
                src={material.header_image}
                alt={material.name}
                width={800}
                height={400}
                layout="responsive"
                objectFit="cover"
                className="rounded-lg"
              />
            </div>
          )}
          <div className="prose max-w-none mb-6" dangerouslySetInnerHTML={{ __html: material.description }} />
          
          <Tabs defaultValue="properties">
            <TabsList>
              <TabsTrigger value="properties">Properties</TabsTrigger>
              <TabsTrigger value="usage">Usage Examples</TabsTrigger>
              <TabsTrigger value="history">Edit History</TabsTrigger>
            </TabsList>
            <TabsContent value="properties">
              <Card>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Property</TableHead>
                        <TableHead>Value</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {Object.entries(material.properties || {}).map(([key, value]) => (
                        <TableRow key={key}>
                          <TableCell className="font-medium">{key}</TableCell>
                          <TableCell>{value}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="usage">
              <Card>
                <CardContent>
                  {material.usage_examples && material.usage_examples.map((example, index) => (
                    <div key={index} className="mb-4">
                      <h3 className="text-lg font-semibold">{example.title}</h3>
                      <p>{example.description}</p>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="history">
              <Card>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Editor</TableHead>
                        <TableHead>Changes</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {material.edit_history && material.edit_history.map((edit, index) => (
                        <TableRow key={index}>
                          <TableCell>{new Date(edit.date).toLocaleDateString()}</TableCell>
                          <TableCell>{edit.editor}</TableCell>
                          <TableCell>{edit.changes}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        
        <div>
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Related Materials</CardTitle>
            </CardHeader>
            <CardContent>
              {material.related_materials && material.related_materials.map((related, index) => (
                <div key={index} className="mb-4">
                  <h3 className="font-semibold">{related.name}</h3>
                  <p className="text-sm text-muted-foreground">{related.description}</p>
                  <Link href={`/materials/${related.slug}`}>
                    <Button variant="link" className="p-0">View</Button>
                  </Link>
                </div>
              ))}
            </CardContent>
          </Card>
          
          {session && (
            <Card>
              <CardContent className="pt-6">
                <Link href={`/materials/${material.slug}/edit`}>
                  <Button className="w-full">Edit Material</Button>
                </Link>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}

/./matlas-wiki/app/materials/[slug]/page.js
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { useSession, useSupabaseClient } from '@supabase/auth-helpers-react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function MaterialPage({ params }) {
  const router = useRouter();
  const { slug } = params;
  const [material, setMaterial] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const session = useSession();
  const supabase = useSupabaseClient();

  useEffect(() => {
    fetchMaterial();
  }, [slug]);

  async function fetchMaterial() {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('materials')
        .select('*')
        .eq('slug', slug)
        .single();
      
      if (error) throw error;
      setMaterial(data);
    } catch (error) {
      setError('Failed to fetch material');
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  }

  if (loading) return <div className="container mx-auto px-4 py-8">Loading...</div>;
  if (error) return <div className="container mx-auto px-4 py-8">Error: {error}</div>;
  if (!material) return <div className="container mx-auto px-4 py-8">Material not found</div>;
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2">
          <h1 className="text-4xl font-bold mb-4">{material.name}</h1>
          {material.header_image && (
            <div className="mb-6">
              <Image 
                src={material.header_image}
                alt={material.name}
                width={800}
                height={400}
                layout="responsive"
                objectFit="cover"
                className="rounded-lg"
              />
            </div>
          )}
          <p className="text-lg mb-6">{material.description}</p>
          
          <Tabs defaultValue="properties">
            <TabsList>
              <TabsTrigger value="properties">Properties</TabsTrigger>
              <TabsTrigger value="usage">Usage Examples</TabsTrigger>
              <TabsTrigger value="history">Edit History</TabsTrigger>
            </TabsList>
            <TabsContent value="properties">
              <Card>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Property</TableHead>
                        <TableHead>Value</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {Object.entries(material.properties || {}).map(([key, value]) => (
                        <TableRow key={key}>
                          <TableCell className="font-medium">{key}</TableCell>
                          <TableCell>{value}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="usage">
              <Card>
                <CardContent>
                  {material.usage_examples && material.usage_examples.map((example, index) => (
                    <div key={index} className="mb-4">
                      <h3 className="text-lg font-semibold">{example.title}</h3>
                      <p>{example.description}</p>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="history">
              <Card>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Editor</TableHead>
                        <TableHead>Changes</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {material.edit_history && material.edit_history.map((edit, index) => (
                        <TableRow key={index}>
                          <TableCell>{new Date(edit.date).toLocaleDateString()}</TableCell>
                          <TableCell>{edit.editor}</TableCell>
                          <TableCell>{edit.changes}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        
        <div>
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Related Materials</CardTitle>
            </CardHeader>
            <CardContent>
              {material.related_materials && material.related_materials.map((related, index) => (
                <div key={index} className="mb-4">
                  <h3 className="font-semibold">{related.name}</h3>
                  <p className="text-sm text-muted-foreground">{related.description}</p>
                  <Link href={`/materials/${related.slug}`}>
                    <Button variant="link" className="p-0">View</Button>
                  </Link>
                </div>
              ))}
            </CardContent>
          </Card>
          
          {session && (
            <Card>
              <CardContent className="pt-6">
                <Link href={`/materials/${material.slug}/edit`}>
                  <Button className="w-full">Edit Material</Button>
                </Link>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}

/./matlas-wiki/lib/supabaseClient.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);


/./matlas-wiki/app/materials/page.js
'use client';

import { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import Link from 'next/link';
import Image from 'next/image';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Grid, List, Search } from 'lucide-react';

export default function MaterialsPage() {
  const [materials, setMaterials] = useState([]);
  const [categories, setCategories] = useState({});
  const [view, setView] = useState('grid');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedSubcategory, setSelectedSubcategory] = useState('all');
  const [advancedSearch, setAdvancedSearch] = useState({
    inTitle: false,
    inDescription: false,
    inProperties: false,
  });

  useEffect(() => {
    const fetchData = async () => {
      const supabase = createClientComponentClient();
      setLoading(true);
      setError(null);
      try {
        const { data: materialsData, error: materialsError } = await supabase
          .from('materials')
          .select('*')
          .order('name', { ascending: true });
        if (materialsError) throw new Error(materialsError.message);
        setMaterials(materialsData);
        const categoriesObj = materialsData.reduce((acc, material) => {
          if (material.category) {
            if (!acc[material.category]) {
              acc[material.category] = new Set();
            }
            if (material.subcategory) {
              acc[material.category].add(material.subcategory);
            }
          }
          return acc;
        }, {});
        Object.keys(categoriesObj).forEach(category => {
          categoriesObj[category] = Array.from(categoriesObj[category]);
        });
        setCategories(categoriesObj);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError('Failed to fetch data: ' + err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const handleSearch = () => {
    // Implement search functionality
  };

  const filteredMaterials = materials.filter((material) => {
    const matchesSearch = material.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      material.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || material.category === selectedCategory;
    const matchesSubcategory = selectedSubcategory === 'all' || material.subcategory === selectedSubcategory;
    return matchesSearch && matchesCategory && matchesSubcategory;
  });

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex flex-col mb-6">
        <h1 className="text-3xl font-bold text-primary mb-4">Materials Library</h1>
        <div className="flex flex-wrap gap-2 items-center">          <div className="flex gap-2">
            <Button onClick={() => setView('grid')} variant={view === 'grid' ? 'default' : 'outline'}>
              <Grid className="mr-2 h-4 w-4" />
              Grid
            </Button>
            <Button onClick={() => setView('table')} variant={view === 'table' ? 'default' : 'outline'}>
              <List className="mr-2 h-4 w-4" />
              Table
            </Button>
          </div>
          <div className="flex-1 max-w-sm ml-4">
          <div className="relative">
  <Search 
    className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400 cursor-pointer" 
    onClick={handleSearch}
  />
  <Input
    type="text"
    placeholder="Search materials..."
    value={searchTerm}
    onChange={(e) => setSearchTerm(e.target.value)}
    onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
    className="pl-10 pr-4"
  />
</div>  
          </div>
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="w-[200px]">
              <SelectValue placeholder="Select category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All categories</SelectItem>
              {Object.keys(categories).map((category) => (
                <SelectItem key={category} value={category}>{category}</SelectItem>
              ))}
            </SelectContent>
          </Select>
          {selectedCategory !== 'all' && (
            <Select value={selectedSubcategory} onValueChange={setSelectedSubcategory}>
              <SelectTrigger className="w-[200px]">
                <SelectValue placeholder="Select subcategory" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All subcategories</SelectItem>
                {categories[selectedCategory]?.map((subcategory) => (
                  <SelectItem key={subcategory} value={subcategory}>{subcategory}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}
          <Button onClick={handleSearch}>Search</Button>
        </div>
      </div>
      <div className="mb-4">
        <h3 className="text-lg font-semibold mb-2">Advanced Search Options</h3>
        <div className="flex gap-4">
          <Label className="flex items-center">
            <Checkbox
              checked={advancedSearch.inTitle}
              onCheckedChange={(checked) => setAdvancedSearch({...advancedSearch, inTitle: checked})}
              className="mr-2"
            />
            Search in title
          </Label>
          <Label className="flex items-center">
            <Checkbox
              checked={advancedSearch.inDescription}
              onCheckedChange={(checked) => setAdvancedSearch({...advancedSearch, inDescription: checked})}
              className="mr-2"
            />
            Search in description
          </Label>
          <Label className="flex items-center">
            <Checkbox
              checked={advancedSearch.inProperties}
              onCheckedChange={(checked) => setAdvancedSearch({...advancedSearch, inProperties: checked})}
              className="mr-2"
            />
            Search in properties
          </Label>
        </div>
      </div>
      {loading && <div>Loading...</div>}
      {error && <div className="text-red-500">Error: {error}</div>}
      {!loading && !error && (
        view === 'grid' ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredMaterials.map((material) => (
              <Card key={material.id} className="hover:shadow-lg transition-shadow">
                {material.header_image && (
                  <div className="h-40 relative">
                    <Image 
                      src={material.header_image}
                      alt={material.name}
                      layout="fill"
                      objectFit="cover"
                      className="rounded-t-lg"
                    />
                  </div>
                )}
                <CardHeader>
                  <CardTitle className="text-xl">{material.name}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground mb-4">{material.description.substring(0, 100)}...</p>
                  <Link href={`/materials/${material.slug}`}>
                    <Button variant="outline">View Details</Button>
                  </Link>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <table className="w-full">
            <thead>
              <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Category</th>
                <th>Subcategory</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredMaterials.map((material) => (
                <tr key={material.id}>
                  <td>{material.name}</td>
                  <td>{material.description.substring(0, 100)}...</td>
                  <td>{material.category}</td>
                  <td>{material.subcategory}</td>
                  <td>
                    <Link href={`/materials/${material.slug}`}>
                      <Button size="sm" variant="outline">View Details</Button>
                    </Link>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )
      )}
    </div>
  );
}

/./matlas-wiki/app/profile/page.js
// app/profile/page.js
'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { supabase, uploadFileToSupabase } from '../../lib/db';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

export default function ProfilePage() {
  const [user, setUser] = useState(null);
  const [name, setName] = useState('');
  const [bio, setBio] = useState('');
  const [website, setWebsite] = useState('');
  const [avatarUrl, setAvatarUrl] = useState('');
  const [contributions, setContributions] = useState([]);
  const [isEditing, setIsEditing] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const router = useRouter();

  const fetchUserProfile = useCallback(async () => {
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      setUser(user);
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();
      if (error) {
        console.error('Error fetching profile:', error);
      } else if (data) {
        setName(data.name || '');
        setBio(data.bio || '');
        setWebsite(data.website || '');
        setAvatarUrl(data.avatar_url || '');
      }
    } else {
      router.push('/auth');
    }
  }, [router]);

  const fetchUserContributions = useCallback(async () => {
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      const { data, error } = await supabase
        .from('contributions')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });
      if (error) {
        console.error('Error fetching contributions:', error);
      } else {
        setContributions(data);
      }
    }
  }, []);

  useEffect(() => {
    fetchUserProfile();
    fetchUserContributions();
  }, [fetchUserProfile, fetchUserContributions]);

  async function handleProfileUpdate(e) {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    const { data, error } = await supabase
      .from('profiles')
      .upsert({
        id: user.id,
        name,
        bio,
        website,
        avatar_url: avatarUrl,
        updated_at: new Date(),
      });

    if (error) {
      setError('Failed to update profile. Please try again.');
    } else {
      setSuccess('Profile updated successfully!');
      setIsEditing(false);
    }
  }

  async function handleAvatarUpload(e) {
    const file = e.target.files[0];
    if (!file) return;

    try {
      const publicUrl = await uploadFileToSupabase(file, 'avatars', user.id);
      setAvatarUrl(publicUrl);
      
      // Update the profile with the new avatar URL
      const { error } = await supabase
        .from('profiles')
        .update({ avatar_url: publicUrl })
        .eq('id', user.id);

      if (error) {
        throw error;
      }

      setSuccess('Avatar updated successfully!');
    } catch (error) {
      console.error('Error uploading avatar:', error);
      setError('Failed to upload avatar. Please try again.');
    }
  }

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Your Profile</h1>
      
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      
      {success && (
        <Alert className="mb-6">
          <AlertTitle>Success</AlertTitle>
          <AlertDescription>{success}</AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <Card>
          <CardHeader>
            <CardTitle>Profile Information</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleProfileUpdate} className="space-y-4">
              <div className="flex items-center space-x-4">
                <Avatar className="w-20 h-20">
                  <AvatarImage src={avatarUrl} alt={name} />
                  <AvatarFallback>{name.charAt(0)}</AvatarFallback>
                </Avatar>
                <Input 
                  type="file" 
                  accept="image/*"
                  onChange={handleAvatarUpload}
                  disabled={!isEditing}
                />
              </div>
              <div>
                <Label htmlFor="name">Name</Label>
                <Input 
                  id="name" 
                  value={name} 
                  onChange={(e) => setName(e.target.value)}
                  disabled={!isEditing}
                />
              </div>
              <div>
                <Label htmlFor="email">Email</Label>
                <Input id="email" value={user.email} disabled />
              </div>
              <div>
                <Label htmlFor="bio">Bio</Label>
                <Textarea 
                  id="bio" 
                  value={bio} 
                  onChange={(e) => setBio(e.target.value)}
                  disabled={!isEditing}
                />
              </div>
              <div>
                <Label htmlFor="website">Website</Label>
                <Input 
                  id="website" 
                  value={website} 
                  onChange={(e) => setWebsite(e.target.value)}
                  disabled={!isEditing}
                />
              </div>
              {isEditing ? (
                <Button type="submit">Save Changes</Button>
              ) : (
                <Button type="button" onClick={() => setIsEditing(true)}>Edit Profile</Button>
              )}
            </form>
          </CardContent>
        </Card>

        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Your Contributions</CardTitle>
          </CardHeader>
          <CardContent>
            {contributions.length > 0 ? (
              <ul className="space-y-4">
                {contributions.map((contribution) => (
                  <li key={contribution.id} className="border-b pb-4 last:border-b-0">
                    <h3 className="font-semibold">{contribution.title}</h3>
                    <p className="text-sm text-muted-foreground">
                      {new Date(contribution.created_at).toLocaleDateString()}
                    </p>
                    <p>{contribution.description}</p>
                  </li>
                ))}
              </ul>
            ) : (
              <p>You haven&apos;t made any contributions yet.</p>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

/./matlas-wiki/app/layout.js
// app/layout.tsx
'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { Manrope } from 'next/font/google';
import { cn } from '@/lib/utils';
import './globals.css';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { SessionContextProvider } from '@supabase/auth-helpers-react';
import { Button } from "@/components/ui/button";
import { Menu } from 'lucide-react';

const fontHeading = Manrope({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-heading',
});

const fontBody = Manrope({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-body',
});

export default function RootLayout({ children }) {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [user, setUser] = useState(null);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const supabase = createClientComponentClient();

  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    setIsDarkMode(mediaQuery.matches);
    const handleChange = () => setIsDarkMode(mediaQuery.matches);
    mediaQuery.addEventListener('change', handleChange);

    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null);
    });

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
    });

    return () => {
      mediaQuery.removeEventListener('change', handleChange);
      subscription.unsubscribe();
    };
  }, [supabase.auth]);

  const handleSignOut = async () => {
    await supabase.auth.signOut();
    setIsMenuOpen(false);
  };

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

  return (
    <html lang="en" className={cn(fontHeading.variable, fontBody.variable, isDarkMode ? 'dark' : '')}>
      <SessionContextProvider supabaseClient={supabase}>
        <body className="min-h-screen flex flex-col bg-background text-foreground antialiased">
          <header className="bg-card text-card-foreground p-4">
            <nav className="container mx-auto flex justify-between items-center">
              <Link href="/" className="text-2xl font-bold text-primary">
                MatLas Wiki
              </Link>
              <div className="md:hidden">
                <Button onClick={toggleMenu} variant="ghost">
                  <Menu />
                </Button>
              </div>
              <ul className={`md:flex md:space-x-4 items-center ${isMenuOpen ? 'block' : 'hidden'} md:block absolute md:relative top-16 md:top-0 right-0 md:right-auto bg-card md:bg-transparent p-4 md:p-0 rounded shadow md:shadow-none`}>
                <li><Link href="/" className="hover:text-primary-foreground block py-2 md:py-0" onClick={() => setIsMenuOpen(false)}>Home</Link></li>
                <li><Link href="/materials" className="hover:text-primary-foreground block py-2 md:py-0" onClick={() => setIsMenuOpen(false)}>Materials Library</Link></li>
                {user && (
                  <li><Link href="/materials/new/edit" className="hover:text-primary-foreground block py-2 md:py-0" onClick={() => setIsMenuOpen(false)}>Add Material</Link></li>
                )}
                {user ? (
                  <>
                    <li><Link href="/profile" className="hover:text-primary-foreground block py-2 md:py-0" onClick={() => setIsMenuOpen(false)}>Profile</Link></li>
                    <li><Button onClick={handleSignOut}>Sign Out</Button></li>
                  </>
                ) : (
                  <li><Link href="/auth" onClick={() => setIsMenuOpen(false)}><Button>Sign In</Button></Link></li>
                )}
              </ul>
            </nav>
          </header>
          <main className="flex-grow container mx-auto px-4 py-8">
            {children}
          </main>
          <footer className="bg-card text-card-foreground p-4 mt-8">
            <div className="container mx-auto text-center text-sm">
              &copy; 2024 Materials Wiki. All rights reserved.
            </div>
          </footer>
        </body>
      </SessionContextProvider>
    </html>
  );
}

/./matlas-wiki/app/page.js
// app/page.js
'use client';

import { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ChevronDown, Search } from 'lucide-react';

export default function HomePage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [randomMaterials, setRandomMaterials] = useState([]);
  const [categories, setCategories] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const fetchData = async () => {
      const supabase = createClientComponentClient();
      setLoading(true);
      setError(null);

      try {
        // Fetch random materials
        const { data: materialsData, error: materialsError } = await supabase
          .from('materials')
          .select('id, name, description, header_image, slug, category, subcategory')
          .limit(3);

        if (materialsError) throw new Error(materialsError.message);
        setRandomMaterials(materialsData);

        // Fetch all materials to get categories and subcategories
        const { data: allMaterials, error: allMaterialsError } = await supabase
          .from('materials')
          .select('category, subcategory');

        if (allMaterialsError) throw new Error(allMaterialsError.message);

        // Organize categories and subcategories
        const categoriesObj = allMaterials.reduce((acc, material) => {
          if (material.category) {
            if (!acc[material.category]) {
              acc[material.category] = new Set();
            }
            if (material.subcategory) {
              acc[material.category].add(material.subcategory);
            }
          }
          return acc;
        }, {});

        // Convert Sets to Arrays
        Object.keys(categoriesObj).forEach(category => {
          categoriesObj[category] = Array.from(categoriesObj[category]);
        });

        setCategories(categoriesObj);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError('Failed to fetch data: ' + err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleSearch = (e) => {
    e.preventDefault();
    router.push(`/materials?search=${encodeURIComponent(searchTerm)}`);
  };

  const handleCategoryClick = (category) => {
    router.push(`/materials?category=${encodeURIComponent(category)}`);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex flex-col items-center mb-12">
        <Image src="/matlas-logo.png" alt="MatLas Wiki logo" width={200} height={200} className="mb-8" />
        <h1 className="text-4xl font-bold text-primary mb-6">MatLas Wiki</h1>
        <p className="text-xl mb-6">The Free Material Encyclopedia</p>
        <form onSubmit={handleSearch} className="w-full max-w-2xl mb-8">
          <div className="relative">
            <Search 
              className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400 cursor-pointer" 
              onClick={handleSearch}
            />
            <Input 
              type="text" 
              placeholder="Search materials..." 
              value={searchTerm} 
              onChange={(e) => setSearchTerm(e.target.value)} 
              className="pl-10 pr-4"
            />
          </div>
        </form>
      </div>

      <h2 className="text-2xl font-bold mb-4">Random Materials</h2>
      {loading && <div>Loading random materials...</div>}
      {error && <div className="text-red-500">Error: {error}</div>}
      {!loading && !error && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
          {randomMaterials.map((material) => (
            <Card key={material.id} className="hover:shadow-lg transition-shadow flex flex-col h-full">
              <div className="h-48 relative">
                {material.header_image ? (
                  <Image 
                    src={material.header_image}
                    alt={material.name}
                    layout="fill"
                    objectFit="cover"
                    className="rounded-t-lg"
                  />
                ) : (
                  <div className="w-full h-full bg-gray-200 flex items-center justify-center rounded-t-lg">
                    <span className="text-gray-400">No image available</span>
                  </div>
                )}
              </div>
              <CardHeader>
                <CardTitle className="text-xl">{material.name}</CardTitle>
              </CardHeader>
              <CardContent className="flex-grow">
                <p className="text-muted-foreground mb-4">
                  {material.description ? `${material.description.substring(0, 100)}...` : 'No description available.'}
                </p>
              </CardContent>
              <CardContent className="pt-0">
                <Link href={`/materials/${material.slug}`}>
                  <Button variant="outline" size="sm" className="w-full">View Details</Button>
                </Link>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      <h2 className="text-2xl font-bold mb-4">Material Categories</h2>
      <div className="grid grid-cols-2 md:grid-cols-3 gap-6 mb-12">
        {Object.entries(categories).map(([category, subcategories]) => (
          <Card key={category} className="hover:shadow-lg transition-shadow">
            <CardHeader>
              <CardTitle className="text-xl">{category}</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground mb-2">{subcategories.length} subcategories</p>
              <Button variant="outline" size="sm" onClick={() => handleCategoryClick(category)}>Explore</Button>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="text-center">
        <Button variant="outline" className="text-primary">
          Read MatLas Wiki in your language <ChevronDown className="ml-2 h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}

